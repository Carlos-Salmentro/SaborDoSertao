// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaborDoSertão.InfraNet;

#nullable disable

namespace SaborDoSertão.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230222181949_fix - Comanda ValorPago & ValorRestante")]
    partial class fixComandaValorPagoValorRestante
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SaborDoSertão.Domain.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<double?>("Custo")
                        .HasColumnType("double");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Preco")
                        .HasColumnType("double");

                    b.Property<int?>("QuantServe")
                        .HasColumnType("int");

                    b.Property<int?>("Tamanho")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b53e7306-a247-4add-a3e6-e3e1db6ed98b"),
                            Categoria = 0,
                            Nome = "Feijoada",
                            Preco = 30.0,
                            Tamanho = 0
                        },
                        new
                        {
                            Id = new Guid("1dbefb09-d517-479b-98b6-5f9f1f5c2f7d"),
                            Categoria = 0,
                            Nome = "Feijoada",
                            Preco = 35.0,
                            Tamanho = 1
                        },
                        new
                        {
                            Id = new Guid("0afbde41-e984-4690-984e-b080070336c8"),
                            Categoria = 0,
                            Nome = "Feijoada",
                            Preco = 50.0,
                            Tamanho = 2
                        },
                        new
                        {
                            Id = new Guid("8a8d8080-2b6c-4cd9-beb0-50772a0f16e6"),
                            Categoria = 0,
                            Nome = "Feijoada",
                            Preco = 70.0,
                            Tamanho = 3
                        },
                        new
                        {
                            Id = new Guid("d9798013-7288-48ba-841c-2cfc9c0a5608"),
                            Categoria = 0,
                            Nome = "Favada",
                            Preco = 35.0
                        },
                        new
                        {
                            Id = new Guid("78cc8316-7d4b-44f4-931e-2f75791ffc9b"),
                            Categoria = 0,
                            Nome = "Baiao de Dois",
                            Preco = 30.0,
                            Tamanho = 0
                        },
                        new
                        {
                            Id = new Guid("046cf21f-bb7e-4c60-b282-3206a9563347"),
                            Categoria = 0,
                            Nome = "Baiao de Dois",
                            Preco = 40.0,
                            Tamanho = 1
                        },
                        new
                        {
                            Id = new Guid("415ccf04-f6dd-4367-b2be-ebba1cd7d3ca"),
                            Categoria = 0,
                            Nome = "Baiao de Dois",
                            Preco = 50.0,
                            Tamanho = 2
                        },
                        new
                        {
                            Id = new Guid("a3fbd96f-0bdd-4d82-a60f-fbb9ee1a6f57"),
                            Categoria = 0,
                            Nome = "Lampião",
                            Preco = 125.0,
                            QuantServe = 4
                        },
                        new
                        {
                            Id = new Guid("8045c7b8-3416-4b36-9b18-5ce963b824cc"),
                            Categoria = 0,
                            Nome = "Maria Bonita",
                            Preco = 110.0
                        },
                        new
                        {
                            Id = new Guid("a5dc2cc7-9f85-4ee8-97b2-b3c302d33ac3"),
                            Categoria = 1,
                            Nome = "Caipirinha de Limao com Vodka",
                            Preco = 25.0
                        },
                        new
                        {
                            Id = new Guid("81ce1511-a24e-4ebd-bd7b-e27ec6433396"),
                            Categoria = 1,
                            Nome = "Caipirinha de Limao com Pinga",
                            Preco = 15.0
                        },
                        new
                        {
                            Id = new Guid("0d7b4dd3-290e-4bff-a926-891d167e8b7e"),
                            Categoria = 1,
                            Nome = "Caipirinha de Limao com Saque",
                            Preco = 27.0
                        },
                        new
                        {
                            Id = new Guid("d0ffdd13-2216-405c-a157-e37ecc2d0a81"),
                            Categoria = 1,
                            Nome = "Caipirinha de Frutas com Vodka",
                            Preco = 27.0
                        },
                        new
                        {
                            Id = new Guid("61a8c12f-6af5-4769-9fd8-b9cbc817c243"),
                            Categoria = 1,
                            Nome = "Caipirinha de Frutas com Pinga",
                            Preco = 17.0
                        },
                        new
                        {
                            Id = new Guid("f7f620c0-c16d-47b2-bb19-40fea7edc5ea"),
                            Categoria = 1,
                            Nome = "Caipirinha de Frutas com Saque",
                            Preco = 29.0
                        },
                        new
                        {
                            Id = new Guid("918de895-8484-495e-81a5-65193255a2f9"),
                            Categoria = 1,
                            Nome = "Caipirinha de Frutas Vermelhas com Vodka",
                            Preco = 29.0
                        },
                        new
                        {
                            Id = new Guid("7bc524af-ead3-45d1-a653-0c778b75492b"),
                            Categoria = 1,
                            Nome = "Caipirinha de Frutas Vermelhas com Pinga",
                            Preco = 19.0
                        },
                        new
                        {
                            Id = new Guid("c86f53ba-9881-4889-906d-4b19389794a6"),
                            Categoria = 1,
                            Nome = "Caipirinha de Frutas Vermelhas com Saque",
                            Preco = 31.0
                        },
                        new
                        {
                            Id = new Guid("c127f202-8210-4748-bd4e-8f396c216f71"),
                            Categoria = 1,
                            Nome = "Lua de Mel",
                            Preco = 20.0
                        },
                        new
                        {
                            Id = new Guid("4b966156-5d31-4578-973c-b4a1f3e7e9ed"),
                            Categoria = 1,
                            Nome = "Sex on The Beach",
                            Preco = 20.0
                        },
                        new
                        {
                            Id = new Guid("f857da9d-be8c-48c5-83d1-81a8ceb9edf9"),
                            Categoria = 2,
                            Nome = "Arroz",
                            Preco = 5.0
                        },
                        new
                        {
                            Id = new Guid("c51ad005-717d-41a8-a241-e33fa22744ee"),
                            Categoria = 2,
                            Nome = "Feijao",
                            Preco = 6.5
                        },
                        new
                        {
                            Id = new Guid("5c864fc9-b481-4155-b724-caf9abc7b89d"),
                            Categoria = 2,
                            Nome = "Ovo",
                            Preco = 2.5
                        },
                        new
                        {
                            Id = new Guid("05ee449a-9f32-4d14-a9be-dada6e1279d3"),
                            Categoria = 3,
                            Nome = "Batata Frita",
                            Preco = 20.0,
                            Tamanho = 0
                        },
                        new
                        {
                            Id = new Guid("4e01db02-b4bf-443f-93fe-9862e9614658"),
                            Categoria = 3,
                            Nome = "Batata Frita",
                            Preco = 25.0,
                            Tamanho = 1
                        },
                        new
                        {
                            Id = new Guid("79317347-4db7-45ec-9bfd-dd3818b2ecb4"),
                            Categoria = 3,
                            Nome = "Batata Frita",
                            Preco = 30.0,
                            Tamanho = 2
                        },
                        new
                        {
                            Id = new Guid("7efd508b-d782-4634-9d63-8e2ede539d4b"),
                            Categoria = 3,
                            Nome = "Batata Frita",
                            Preco = 40.0,
                            Tamanho = 3
                        },
                        new
                        {
                            Id = new Guid("0a91ad16-3e59-4f02-837a-1c9bb3c52d0d"),
                            Categoria = 3,
                            Nome = "Mandioca Frita",
                            Preco = 24.0,
                            Tamanho = 0
                        },
                        new
                        {
                            Id = new Guid("dabc685c-406f-4bd0-9825-54e847e8bf4a"),
                            Categoria = 3,
                            Nome = "Mandioca Frita",
                            Preco = 29.0,
                            Tamanho = 1
                        },
                        new
                        {
                            Id = new Guid("73c9c1da-c916-4b46-8e33-54d5f9cefb7e"),
                            Categoria = 3,
                            Nome = "Mandioca Frita",
                            Preco = 35.0,
                            Tamanho = 2
                        },
                        new
                        {
                            Id = new Guid("afacdeb9-14aa-48e4-ae5f-7a2a8aabb124"),
                            Categoria = 3,
                            Nome = "Mandioca Frita",
                            Preco = 45.0,
                            Tamanho = 3
                        },
                        new
                        {
                            Id = new Guid("a2f0738a-2dc8-40aa-8588-5689c60d8c14"),
                            Categoria = 4,
                            Nome = "Sorvete",
                            Preco = 10.0
                        },
                        new
                        {
                            Id = new Guid("0780f69e-d63e-467c-85df-d89db660d562"),
                            Categoria = 4,
                            Nome = "Pettit Gateau",
                            Preco = 18.5
                        },
                        new
                        {
                            Id = new Guid("7f81a707-b730-46ff-b677-172f956a3e7a"),
                            Categoria = 4,
                            Nome = "Torta Holandesa",
                            Preco = 15.0
                        },
                        new
                        {
                            Id = new Guid("adc8c670-bb04-4380-a9b1-d976d7efdbd5"),
                            Categoria = 5,
                            Nome = "Favada Kg",
                            Preco = 9.5
                        },
                        new
                        {
                            Id = new Guid("139f6304-f9f9-437a-a89d-d31cff1253c5"),
                            Categoria = 5,
                            Nome = "Geleia de Mocoto",
                            Preco = 7.0
                        },
                        new
                        {
                            Id = new Guid("cd116a22-271e-4af6-8642-4af902edb8d5"),
                            Categoria = 5,
                            Nome = "Diversos",
                            Preco = 1.0
                        });
                });

            modelBuilder.Entity("SaborDoSertão.FinanceiroInfo.Fechamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FinanceiroId")
                        .HasColumnType("int");

                    b.Property<int>("FormaDePagamento")
                        .HasColumnType("int");

                    b.Property<double>("ValorPago")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("FinanceiroId");

                    b.ToTable("Fechamento");
                });

            modelBuilder.Entity("SaborDoSertão.FinanceiroInfo.Financeiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Abertura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fechamento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdentificacaoComanda")
                        .HasColumnType("int");

                    b.Property<string>("Identificador")
                        .HasColumnType("longtext");

                    b.Property<int?>("MesaId")
                        .HasColumnType("int");

                    b.Property<double>("ValorTotal")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("FinanceiroTable");
                });

            modelBuilder.Entity("SaborDoSertão.InfraEstrutura.Comanda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Abertura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fechamento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identificador")
                        .HasColumnType("longtext");

                    b.Property<int?>("MesaId")
                        .HasColumnType("int");

                    b.Property<double>("ValorPago")
                        .HasColumnType("double");

                    b.Property<double>("ValorRestante")
                        .HasColumnType("double");

                    b.Property<double>("ValorTotal")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("ComandasTable");
                });

            modelBuilder.Entity("SaborDoSertão.InfraEstrutura.Mesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            Status = 0
                        });
                });

            modelBuilder.Entity("SaborDoSertão.InfraEstrutura.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FinanceiroId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("FinanceiroId");

                    b.ToTable("PedidosTable");
                });

            modelBuilder.Entity("SaborDoSertão.FinanceiroInfo.Fechamento", b =>
                {
                    b.HasOne("SaborDoSertão.FinanceiroInfo.Financeiro", null)
                        .WithMany("FechamentoInfo")
                        .HasForeignKey("FinanceiroId");
                });

            modelBuilder.Entity("SaborDoSertão.InfraEstrutura.Pedido", b =>
                {
                    b.HasOne("SaborDoSertão.FinanceiroInfo.Financeiro", null)
                        .WithMany("Pedido")
                        .HasForeignKey("FinanceiroId");
                });

            modelBuilder.Entity("SaborDoSertão.FinanceiroInfo.Financeiro", b =>
                {
                    b.Navigation("FechamentoInfo");

                    b.Navigation("Pedido");
                });
#pragma warning restore 612, 618
        }
    }
}
